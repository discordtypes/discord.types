"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _epoch, _id;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscordSnowflake = void 0;
class DiscordSnowflake {
    /**
     * DiscordSnowflake constructor
     *
     * @param Snowflake           id
     * @param number                epoch
     */
    constructor(id, epoch = 1420070400000) {
        /**
         * Epoch date timestamp.
         * https://discord.com/developers/docs/reference#snowflake
         */
        _epoch.set(this, void 0);
        /**
         * The snowflake to deconstruct
         */
        _id.set(this, void 0);
        __classPrivateFieldSet(this, _id, id);
        __classPrivateFieldSet(this, _epoch, BigInt(epoch instanceof Date ? epoch.getDate() : epoch));
    }
    /**
     * Deconstruct a Snowflake and return it's datas
     * https://discord.com/developers/docs/reference#snowflake
     *
     * @return DeconstructSnowflake
     */
    deconstruct() {
        var id = BigInt(__classPrivateFieldGet(this, _id));
        return {
            id: __classPrivateFieldGet(this, _id),
            timestamp: (id >> 22n) + __classPrivateFieldGet(this, _epoch),
            internal_worker_id: (id >> 17n) & 31n,
            internal_process_id: (id >> 12n) & 31n,
            increment: id & 4095n
        };
    }
    /**
     * Return the timestap field's value
     *
     * @return number
     */
    toTimestamp() {
        return Number(this.deconstruct().timestamp);
    }
}
exports.DiscordSnowflake = DiscordSnowflake;
_epoch = new WeakMap(), _id = new WeakMap();
